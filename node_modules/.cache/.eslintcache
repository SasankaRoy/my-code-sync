[{"E:\\onlineIDEwithreact\\real-time-editor\\src\\index.js":"1","E:\\onlineIDEwithreact\\real-time-editor\\src\\reportWebVitals.js":"2","E:\\onlineIDEwithreact\\real-time-editor\\src\\App.js":"3","E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Home.js":"4","E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Editorpage.js":"5","E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Client.js":"6","E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Editor.js":"7","E:\\onlineIDEwithreact\\real-time-editor\\src\\socket.js":"8","E:\\onlineIDEwithreact\\real-time-editor\\src\\Events.js":"9"},{"size":378,"mtime":1651248359672,"results":"10","hashOfConfig":"11"},{"size":398,"mtime":1651044200651,"results":"12","hashOfConfig":"13"},{"size":779,"mtime":1651127802379,"results":"14","hashOfConfig":"11"},{"size":2709,"mtime":1651295546706,"results":"15","hashOfConfig":"11"},{"size":3577,"mtime":1651399030658,"results":"16","hashOfConfig":"11"},{"size":315,"mtime":1651164201027,"results":"17","hashOfConfig":"11"},{"size":1775,"mtime":1651398847437,"results":"18","hashOfConfig":"11"},{"size":299,"mtime":1651330715897,"results":"19","hashOfConfig":"11"},{"size":198,"mtime":1651334102281,"results":"20","hashOfConfig":"11"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1022uj0",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n3sr8",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\onlineIDEwithreact\\real-time-editor\\src\\index.js",[],[],[],"E:\\onlineIDEwithreact\\real-time-editor\\src\\reportWebVitals.js",[],[],"E:\\onlineIDEwithreact\\real-time-editor\\src\\App.js",[],[],"E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Home.js",["52"],[],"import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { v4 as uuid4 } from \"uuid\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport const Home = () => {\r\n  const [input1, setinput1] = useState(\"\");\r\n  const [input2, setinput2] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  // 1ft inputvalue\r\n  const inputval1 = (event) => {\r\n    event.preventDefault();\r\n    let value = event.target.value;\r\n    setinput1(value);\r\n  };\r\n  // 2nd inputvalue\r\n  const inputval2 = (event) => {\r\n    event.preventDefault();\r\n    let value = event.target.value;\r\n    setinput2(value);\r\n  };\r\n  // genrating uniqueId here...\r\n  const newRoom = (e) => {\r\n    e.preventDefault();\r\n    const uniqueId = uuid4();\r\n    setinput1(uniqueId);\r\n    toast.success(\"A New Room created\");\r\n  };\r\n\r\n  // joining new room here...\r\n\r\n  const joinRoom = () => {\r\n    if (!input1 || !input2) {\r\n      toast.error(\"Please enter the details\");\r\n    } else {\r\n      navigate(`/editor/${input1}`, {\r\n        state: {\r\n          input2,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  //  joining new room with \"enter key\" here...\r\n  const keyUp = (event) => {\r\n    // console.log(event.code)\r\n    if (event.code == \"Enter\") {\r\n      joinRoom();\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"homePage\">\r\n        <div className=\"fromWrapper\">\r\n          <h2 className=\"logo\">\r\n            real-time <span className=\"logoName\">code editor</span>\r\n          </h2>\r\n          <h4 className=\"lable\">Enter invitation room id.</h4>\r\n          <div className=\"ints_here\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"userId\"\r\n              value={input1}\r\n              onChange={inputval1}\r\n              placeholder=\"room id\"\r\n              className=\"input_box\"\r\n              onKeyDown={keyUp}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={input2}\r\n              onChange={inputval2}\r\n              placeholder=\"user name\"\r\n              className=\"input_box\"\r\n              onKeyDown={keyUp}\r\n            />\r\n            <button className=\"btn btn_1\" onClick={joinRoom}>\r\n              Join\r\n            </button>\r\n            <span className=\"createInfo\">\r\n              It you don't have an invitation then create &nbsp;\r\n              <a href=\"/\" onClick={newRoom} className=\"createNew\">\r\n                new Room.\r\n              </a>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <footer>\r\n          <h4 className=\"footer\">\r\n            build with ðŸ’›&nbsp;\r\n            <span className=\"name\"> sasanka roy .</span>\r\n          </h4>\r\n        </footer>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Editorpage.js",["53"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Client } from \"./Client\";\r\nimport { Editor } from \"./Editor\";\r\nimport { initSocket } from \"../socket\";\r\nimport Events from \"../Events\";\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  Navigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport const Editorpage = () => {\r\n  const reactNavigator = useNavigate();\r\n  const location = useLocation();\r\n  const prams = useParams();\r\n  const roomId = prams.roomId;\r\n\r\n  const [connect1, setconnect1] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const codeRef = useRef(null);\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      socketRef.current = await initSocket();\r\n      socketRef.current.on(\"connect_err\", (err) => handleError(err));\r\n      socketRef.current.on(\"connect_faild\", (err) => handleError(err));\r\n      function handleError(E) {\r\n        console.log(\"socket erron\", E);\r\n        toast.error(\"Socket connection failed , try again later\");\r\n        reactNavigator(\"/\");\r\n      }\r\n      socketRef.current.emit(Events.Join, {\r\n        roomId,\r\n        username: location.state?.input2,\r\n      });\r\n\r\n      //listening for joined event\r\n      socketRef.current.on(Events.Joined, ({ client, username, socketId }) => {\r\n        if (username !== location.state.input2) {\r\n          toast.success(`${username} has joined the room`);\r\n          console.log(`${username} has joined the room`);\r\n        }\r\n        setconnect1(client);\r\n        socketRef.current.emit(Events.Sync_Code,{\r\n          code:codeRef.current,\r\n          socketId\r\n        })\r\n      });\r\n\r\n      // lisning for disconnect\r\n\r\n      socketRef.current.on(Events.Disconnected, ({ username, socketId }) => {\r\n        toast.success(`${username} disconnected`);\r\n        setconnect1((pre) => {\r\n          return pre.filter((connect1) => connect1.socketId !== socketId);\r\n        });\r\n      });\r\n    };\r\n    init();\r\n    return () => {\r\n      socketRef.current.off(Events.Disconnected);\r\n      socketRef.current.off(Events.Join);\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  if (!location.state) {\r\n    <Navigate to=\"/\" />;\r\n  }\r\n\r\n  // copyId here...\r\n\r\n  const copyId = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(roomId);\r\n      toast.success(\"RoomId copied successfully\");\r\n    } catch (error) {\r\n      toast.error(\"Con't Copy RoomID\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const leaveRoom = () => {\r\n    return reactNavigator(\"/\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mainWrap\">\r\n        <div className=\"leftSide\">\r\n          <div className=\"sideInner\">\r\n            <div className=\"logo\">\r\n              <h2 className=\"logo_h2\">\r\n                real-time <span className=\"logoName\">code editor</span>\r\n              </h2>\r\n            </div>\r\n            <h3 className=\"conn_h3\">connected</h3>\r\n            <div className=\"connected_list\">\r\n              {connect1.map((client) => (\r\n                <Client key={client.stockeId} username={client.username} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <button className=\"btn btn_copy\" onClick={copyId}>\r\n            copy Room ID\r\n          </button>\r\n          <button className=\"btn btn_leave\" onClick={leaveRoom}>\r\n            Leave\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"editor\">\r\n          <Editor socketRef={socketRef} roomId={roomId} getCode={(code)=>{\r\n            codeRef.current = code;\r\n          }} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Client.js",[],[],"E:\\onlineIDEwithreact\\real-time-editor\\src\\components\\Editor.js",["54","55","56"],[],"import React, { useEffect, useRef } from \"react\";\r\nimport codeMirror from \"codemirror\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/theme/dracula.css\";\r\nimport \"codemirror/addon/edit/closetag\";\r\nimport \"codemirror/addon/edit/closebrackets\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport Events from \"../Events\";\r\n// const textA = document.getElementById('RTeditor');\r\n\r\nexport const Editor = ({ socketRef, roomId, getCode }) => {\r\n  const editorRef = useRef(null);\r\n  useEffect(() => {\r\n    async function init() {\r\n      editorRef.current = codeMirror.fromTextArea(\r\n        document.getElementById(\"RTeditor\"),\r\n        {\r\n          mode: { name: \"javascript\", json: true },\r\n          theme: \"dracula\",\r\n          autoCloseTags: true,\r\n          autoCloseBrackets: true,\r\n          lineNumbers: true,\r\n        }\r\n      );\r\n      editorRef.current.on(\"change\", (instance, value) => {\r\n        const { origin } = value;\r\n        const code = instance.getValue();\r\n        getCode(code);\r\n        if (origin !== \"setValue\") {\r\n          // console.log(\" first working\");\r\n          socketRef.current.emit(Events.Code_Change, {\r\n            roomId,\r\n            code,\r\n          });\r\n        }\r\n\r\n        // console.log(code);\r\n      });\r\n    }\r\n    init();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (socketRef.current) {\r\n      console.log(\"2nd useEffect\");\r\n      socketRef.current.on(Events.Code_Change, ({ code }) => {\r\n        console.log(code);\r\n        if (code !== null) {\r\n          editorRef.current.setValue(code);\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      socketRef.current.off(Events.Code_Change);\r\n    };\r\n  }, [socketRef.current]);\r\n\r\n  return (\r\n    <>\r\n      <textarea id=\"RTeditor\"></textarea>\r\n    </>\r\n  );\r\n};\r\n","E:\\onlineIDEwithreact\\real-time-editor\\src\\socket.js",[],[],"E:\\onlineIDEwithreact\\real-time-editor\\src\\Events.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":47,"column":20,"nodeType":"59","messageId":"60","endLine":47,"endColumn":22},{"ruleId":"61","severity":1,"message":"62","line":66,"column":6,"nodeType":"63","endLine":66,"endColumn":8,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":41,"column":6,"nodeType":"63","endLine":41,"endColumn":8,"suggestions":"66"},{"ruleId":"61","severity":1,"message":"67","line":55,"column":17,"nodeType":"68","endLine":55,"endColumn":24},{"ruleId":"61","severity":1,"message":"69","line":57,"column":6,"nodeType":"63","endLine":57,"endColumn":25,"suggestions":"70"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state.input2', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has missing dependencies: 'getCode', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'getCode' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["72"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["73"],{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [location.state.input2, reactNavigator, roomId]",{"range":"80","text":"81"},"Update the dependencies array to be: [getCode, roomId, socketRef]",{"range":"82","text":"83"},"Update the dependencies array to be: [socketRef]",{"range":"84","text":"85"},[2122,2124],"[location.state.input2, reactNavigator, roomId]",[1291,1293],"[getCode, roomId, socketRef]",[1668,1687],"[socketRef]"]