{"ast":null,"code":"var _jsxFileName = \"E:\\\\onlineIDEwithreact\\\\real-time-editor\\\\src\\\\components\\\\Editorpage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Client } from \"./Client\";\nimport { Editor } from \"./Editor\";\nimport { initSocket } from \"../socket\";\nimport Events from \"../Events\";\nimport { useLocation, useNavigate, Navigate, useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Editorpage = () => {\n  _s();\n\n  const reactNavigator = useNavigate();\n  const location = useLocation();\n  const prams = useParams();\n  const roomId = prams.roomId;\n  const [connect1, setconnect1] = useState([]);\n  const socketRef = useRef(null);\n  const codeRef = useRef(null);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on(\"connect_err\", err => handleError(err));\n      socketRef.current.on(\"connect_faild\", err => handleError(err));\n\n      function handleError(E) {\n        console.log(\"socket erron\", E);\n        toast.error(\"Socket connection failed , try again later\");\n        reactNavigator(\"/\");\n      }\n\n      socketRef.current.emit(Events.Join, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.input2\n      }); //listening for joined event\n\n      socketRef.current.on(Events.Joined, _ref => {\n        let {\n          client,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== location.state.input2) {\n          toast.success(`${username} has joined the room`);\n          console.log(`${username} has joined the room`);\n        }\n\n        setconnect1(client);\n        socketRef.current.emit(Events.Sync_Code, {\n          code: codeRef.current\n        });\n      }); // lisning for disconnect\n\n      socketRef.current.on(Events.Disconnected, _ref2 => {\n        let {\n          username,\n          socketId\n        } = _ref2;\n        toast.success(`${username} disconnected`);\n        setconnect1(pre => {\n          return pre.filter(connect1 => connect1.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.off(Events.Disconnected);\n      socketRef.current.off(Events.Join);\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  if (!location.state) {\n    /*#__PURE__*/\n    _jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this);\n  } // copyId here...\n\n\n  const copyId = async () => {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success(\"RoomId copied successfully\");\n    } catch (error) {\n      toast.error(\"Con't Copy RoomID\");\n      console.error(error);\n    }\n  };\n\n  const leaveRoom = () => {\n    return reactNavigator(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainWrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftSide\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sideInner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"logo\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"logo_h2\",\n              children: [\"real-time \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"logoName\",\n                children: \"code editor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"conn_h3\",\n            children: \"connected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connected_list\",\n            children: connect1.map(client => /*#__PURE__*/_jsxDEV(Client, {\n              username: client.username\n            }, client.stockeId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn_copy\",\n          onClick: copyId,\n          children: \"copy Room ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn_leave\",\n          onClick: leaveRoom,\n          children: \"Leave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          socketRef: socketRef,\n          roomId: roomId,\n          getCode: code => {\n            codeRef.current = code;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Editorpage, \"pHO80R+hPeRWLmqpb+ZujmqV89A=\", false, function () {\n  return [useNavigate, useLocation, useParams];\n});\n\n_c = Editorpage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editorpage\");","map":{"version":3,"sources":["E:/onlineIDEwithreact/real-time-editor/src/components/Editorpage.js"],"names":["React","useState","useRef","useEffect","Client","Editor","initSocket","Events","useLocation","useNavigate","Navigate","useParams","toast","Editorpage","reactNavigator","location","prams","roomId","connect1","setconnect1","socketRef","codeRef","init","current","on","err","handleError","E","console","log","error","emit","Join","username","state","input2","Joined","client","socketId","success","Sync_Code","code","Disconnected","pre","filter","off","disconnect","copyId","navigator","clipboard","writeText","leaveRoom","map","stockeId"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Client } from \"./Client\";\r\nimport { Editor } from \"./Editor\";\r\nimport { initSocket } from \"../socket\";\r\nimport Events from \"../Events\";\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  Navigate,\r\n  useParams,\r\n} from \"react-router-dom\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport const Editorpage = () => {\r\n  const reactNavigator = useNavigate();\r\n  const location = useLocation();\r\n  const prams = useParams();\r\n  const roomId = prams.roomId;\r\n\r\n  const [connect1, setconnect1] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const codeRef = useRef(null);\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      socketRef.current = await initSocket();\r\n      socketRef.current.on(\"connect_err\", (err) => handleError(err));\r\n      socketRef.current.on(\"connect_faild\", (err) => handleError(err));\r\n      function handleError(E) {\r\n        console.log(\"socket erron\", E);\r\n        toast.error(\"Socket connection failed , try again later\");\r\n        reactNavigator(\"/\");\r\n      }\r\n      socketRef.current.emit(Events.Join, {\r\n        roomId,\r\n        username: location.state?.input2,\r\n      });\r\n\r\n      //listening for joined event\r\n      socketRef.current.on(Events.Joined, ({ client, username, socketId }) => {\r\n        if (username !== location.state.input2) {\r\n          toast.success(`${username} has joined the room`);\r\n          console.log(`${username} has joined the room`);\r\n        }\r\n        setconnect1(client);\r\n        socketRef.current.emit(Events.Sync_Code,{\r\n          code:codeRef.current,\r\n          \r\n        })\r\n      });\r\n\r\n      // lisning for disconnect\r\n\r\n      socketRef.current.on(Events.Disconnected, ({ username, socketId }) => {\r\n        toast.success(`${username} disconnected`);\r\n        setconnect1((pre) => {\r\n          return pre.filter((connect1) => connect1.socketId !== socketId);\r\n        });\r\n      });\r\n    };\r\n    init();\r\n    return () => {\r\n      socketRef.current.off(Events.Disconnected);\r\n      socketRef.current.off(Events.Join);\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  if (!location.state) {\r\n    <Navigate to=\"/\" />;\r\n  }\r\n\r\n  // copyId here...\r\n\r\n  const copyId = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(roomId);\r\n      toast.success(\"RoomId copied successfully\");\r\n    } catch (error) {\r\n      toast.error(\"Con't Copy RoomID\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const leaveRoom = () => {\r\n    return reactNavigator(\"/\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mainWrap\">\r\n        <div className=\"leftSide\">\r\n          <div className=\"sideInner\">\r\n            <div className=\"logo\">\r\n              <h2 className=\"logo_h2\">\r\n                real-time <span className=\"logoName\">code editor</span>\r\n              </h2>\r\n            </div>\r\n            <h3 className=\"conn_h3\">connected</h3>\r\n            <div className=\"connected_list\">\r\n              {connect1.map((client) => (\r\n                <Client key={client.stockeId} username={client.username} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <button className=\"btn btn_copy\" onClick={copyId}>\r\n            copy Room ID\r\n          </button>\r\n          <button className=\"btn btn_leave\" onClick={leaveRoom}>\r\n            Leave\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"editor\">\r\n          <Editor socketRef={socketRef} roomId={roomId} getCode={(code)=>{\r\n            codeRef.current = code;\r\n          }} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}